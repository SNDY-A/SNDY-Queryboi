import sqlalchemy
import pandas as pd
from sqlalchemy import create_engine, text
from typing import Union, List, Dict, Any

class DatabaseConnector:
    def __init__(self, connection_string: str):
        """Initialize database connection with the given connection string.
        
        Args:
            connection_string: SQLAlchemy-compatible database connection string
        """
        self.engine = create_engine(connection_string)
        self.connection = self.engine.connect()
        self.metadata = sqlalchemy.MetaData()
        self.metadata.reflect(bind=self.engine)
        
        # Cache table metadata for faster access
        self.tables = {}
        for table_name in self.metadata.tables:
            self.tables[table_name] = {
                "columns": [column.name for column in self.metadata.tables[table_name].columns],
                "primary_keys": [key.name for key in self.metadata.tables[table_name].primary_key.columns]
            }
    
    def __del__(self):
        """Close connection when object is destroyed."""
        if hasattr(self, 'connection') and self.connection:
            self.connection.close()
    
    def execute_query(self, query: str) -> Union[pd.DataFrame, int, str]:
        """Execute SQL query and return results.
        
        Returns dataframe for SELECT queries, rowcount for modifications, or error message.
        """
        try:
            # Execute the query
            result = self.connection.execute(text(query))
            
            if query.strip().upper().startswith("SELECT"):
                return pd.DataFrame(result.fetchall(), columns=result.keys())
            
            elif any(query.strip().upper().startswith(action) for action in ["INSERT", "UPDATE", "DELETE"]):
                return result.rowcount
            
            else:
                return "Query executed successfully."
                
        except Exception as e:
            # Log the error (would expand in a real system)
            print(f"Database error: {str(e)}")
            raise Exception(f"Database error: {str(e)}")
    
    def get_table_names(self) -> List[str]:
        """Get list of all tables in the connected database."""
        return list(self.tables.keys())
    
    def get_table_schema(self, table_name: str) -> Dict[str, Any]:
        """Get schema information for the specified table."""
        if table_name in self.tables:
            return self.tables[table_name]
        else:
            raise ValueError(f"Table '{table_name}' does not exist in the database.")
    
    def get_table_preview(self, table_name: str, limit: int = 5) -> pd.DataFrame:
        """Get a preview of data from the specified table."""
        if table_name not in self.tables:
            raise ValueError(f"Table '{table_name}' does not exist in the database.")
        
        query = f"SELECT * FROM {table_name} LIMIT {limit}"
        return self.execute_query(query)
    
    def backup_table(self, table_name: str) -> bool:
        """Create a backup of the specified table."""
        if table_name not in self.tables:
            raise ValueError(f"Table '{table_name}' does not exist in the database.")
        
        backup_table_name = f"{table_name}_backup"
        try:
            # Create backup table with same structure
            self.execute_query(f"CREATE TABLE IF NOT EXISTS {backup_table_name} AS SELECT * FROM {table_name}")
            return True
        except Exception as e:
            print(f"Backup error: {str(e)}")
            return False
